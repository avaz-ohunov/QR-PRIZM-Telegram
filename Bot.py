# Bot.py
# -*- coding: utf8 -*-

from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from BotToken import bot_token
from qrgenerator import qr_generate_transactions, qr_generate_personal
from ScanQR import scan_qr
from headline import create_headline
import os
from datetime import datetime
import sqlite3
import curs, curs_usd
import importlib


storage = MemoryStorage()

bot = Bot(token = bot_token)
db = Dispatcher(bot, storage = storage)


# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
kb1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π QR-–∫–æ–¥")
kb2 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
kb3 = types.KeyboardButton("–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ üì∑")
kb_default = types.ReplyKeyboardMarkup(resize_keyboard = True)
kb_default.add(kb1).insert(kb2).add(kb3)

# –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
kb4 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
kb_cancel = types.ReplyKeyboardMarkup(resize_keyboard = True)
kb_cancel.add(kb4)

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
kb5 = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
kb_continue = types.ReplyKeyboardMarkup(resize_keyboard = True)
kb_continue.add(kb5)

# –î–≤–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
cancel_and_continue = types.ReplyKeyboardMarkup(resize_keyboard = True)
cancel_and_continue.add(kb4).insert(kb5)

# –ö–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç
kb6 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤ —Ä—É–±–ª—è—Ö(‚ÇΩ)")
kb7 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö($)")
kb_currencies = types.ReplyKeyboardMarkup(resize_keyboard = True)
kb_currencies.add(kb6).insert(kb7).add(kb4).insert(kb5)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
kb_delete = types.ReplyKeyboardRemove()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ª–∏—á–Ω–æ–≥–æ QR-–∫–æ–¥–∞
class GenerateQR(StatesGroup):
	get_data = State()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
class Requisites(StatesGroup):
	address = State()
	public_key = State()
	amount = State()
	amount_dollars = State()
	amount_rubles = State()
	comment = State()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–∞ QR-–∫–æ–¥–∞
class Scan(StatesGroup):
	get_photo = State()


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@db.message_handler(commands = ["start"])
async def welcome(message: types.Message):
	await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {message.from_user.first_name}!\n–Ø ‚Äî QR-prizm, –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç QR-–∫–æ–¥—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Ä–µ–≤–æ–¥–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã PRIZM.\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö –º–æ–Ω–µ—Ç –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ò —Ç–æ–≥–¥–∞ —è —Å–æ–∑–¥–∞–º QR-–∫–æ–¥, –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–≤ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.",
					reply_markup = kb_default)

	try:
		connect = sqlite3.connect("QR-prizm users.db")
		db = connect.cursor()
		db.execute(f'INSERT INTO –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ VALUES("{message.from_user.id}", "@{message.from_user.username}")')
		connect.commit()
		connect.close()
		print(f"@{message.from_user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
	
	except sqlite3.IntegrityError:
		pass



# –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
@db.message_handler(state = None)
async def get_command(message: types.Message):
	if message.text == "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π QR-–∫–æ–¥":
		await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ", reply_markup = kb_cancel)
		await GenerateQR.get_data.set()

	elif message.text == "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
		await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞(Address)", reply_markup = kb_cancel)
		await Requisites.address.set()

	elif message.text == "–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ üì∑":
		await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º", reply_markup = kb_cancel)
		await Scan.get_photo.set()

	else:
		await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µüëá", reply_markup = kb_default)



# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—á–Ω–æ–≥–æ QR-–∫–æ–¥–∞
@db.message_handler(state = GenerateQR.get_data)
async def generate_personal_qr(message: types.Message, state: FSMContext):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await state.reset_state()
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)

	else:
		await message.answer("QR-–∫–æ–¥ —Å–æ–∑–¥–∞—ë—Ç—Å—è...", reply_markup = kb_delete)
		qr_generate_personal(message.text, f"{message.from_user.id}.png")
		
		with open(f"{message.from_user.id}.png", "rb") as photo:
			await bot.send_photo(message.chat.id, photo, reply_markup = kb_default)

		os.remove(f"{message.from_user.id}.png")
		await state.finish()



# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
@db.message_handler(state = Requisites.address)
async def get_address(message: types.Message, state: FSMContext):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await state.reset_state()
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)
	
	else:
		address = message.text
		await state.update_data(address = address)
		await message.answer("–ï–≥–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á(Public key)", reply_markup = cancel_and_continue)
		await Requisites.next()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
@db.message_handler(state = Requisites.public_key)
async def get_public_key(message: types.Message, state: FSMContext):
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		await state.update_data(pk = "")
		await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ PRIZM(Amount)", reply_markup = kb_currencies)
		await Requisites.next()
	
	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await state.reset_state()
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)
	
	else:
		public_key = message.text
		await state.update_data(pk = public_key)
		await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç(Amount)", reply_markup = kb_currencies)
		await Requisites.next()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–º
@db.message_handler(state = Requisites.amount)
async def get_amount_prizms(message: types.Message, state: FSMContext):
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		await state.update_data(amount = "")
		await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)", reply_markup = cancel_and_continue)
		await Requisites.last()
	
	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await state.reset_state()
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)
		
	elif message.text == "–í–≤–µ—Å—Ç–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö($)":
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö", reply_markup = cancel_and_continue)
		await Requisites.amount_dollars.set()

	elif message.text == "–í–≤–µ—Å—Ç–∏ –≤ —Ä—É–±–ª—è—Ö(‚ÇΩ)":
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö", reply_markup = cancel_and_continue)
		await Requisites.amount_rubles.set()

	else:
		amount = message.text
		await state.update_data(amount = amount)
		await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)", reply_markup = cancel_and_continue)
		await Requisites.last()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
@db.message_handler(state = Requisites.amount_dollars)
async def get_amount_dollars(message: types.Message, state: FSMContext):	
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		await state.update_data(amount = "")
		await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)")
		await Requisites.last()

	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await state.reset_state()
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)

	else:
		importlib.reload(curs_usd)
		pzm = message.text
		try:
			amount = float(pzm) / float(curs_usd.pzm_curs)
			amount = round(amount, 2)
			await state.update_data(amount = str(amount))
			await message.answer(f"${message.text} = {amount} PZM")
			await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)")
			await Requisites.last()
		except:
			await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–º –≤ —Ä—É–±–ª—è—Ö
@db.message_handler(state = Requisites.amount_rubles)
async def get_amount_rubles(message: types.Message, state: FSMContext):	
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		await state.update_data(amount = "")
		await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)")
		await Requisites.last()

	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await state.reset_state()
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)

	else:
		importlib.reload(curs)
		pzm = message.text
		try:
			amount = float(pzm) / float(curs.pzm_curs)
			amount = round(amount, 2)
			await state.update_data(amount = str(amount))
			await message.answer(f"‚ÇΩ{message.text} = {amount} PZM")
			await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)")
			await Requisites.last()
		except:
			await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
@db.message_handler(state = Requisites.comment)
async def get_comment(message: types.Message, state: FSMContext):
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		await state.update_data(comment = "")
		data = await state.get_data()
		await message.answer("QR-–∫–æ–¥ —Å–æ–∑–¥–∞—ë—Ç—Å—è...", reply_markup = kb_delete)
	
	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await state.reset_state()
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)
		return None
	
	else:
		comment = message.text
		await state.update_data(comment = comment)
		data = await state.get_data()
		await message.answer("QR-–∫–æ–¥ —Å–æ–∑–¥–∞—ë—Ç—Å—è...", reply_markup = kb_delete)

	pzm_site = "https://wallet.prizm.space/?to="
	
	if data["comment"] == "":
		qr_data = f"{pzm_site}{data['address']}:{data['pk']}:{data['amount']}"
	else:
		qr_data = f"{pzm_site}{data['address']}:{data['pk']}:{data['amount']}:{data['comment']}"
	
	qr_generate_transactions(qr_data, f"{message.from_user.id}.png")
	create_headline(data["address"], message.from_user.id)

	with open(f"{message.from_user.id}.png", "rb") as photo:
		await bot.send_photo(message.chat.id, photo, reply_markup = kb_default)

	os.remove(f"{message.from_user.id}.png")

	await state.finish()



# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–∫–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä—É
@db.message_handler(state = Scan.get_photo, content_types = ["photo", "text"])
async def get_photo(message, state: FSMContext):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await state.reset_state()
		await message.answer("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)

	else:
		# C:\Users\User\AppData\Local\Programs\Python\Python38-32\Lib\site-packages\aiogram\types\mixins.py | line: 40
		await message.photo[-1].download(f"{message.from_user.id}.png")
		await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...", reply_markup = kb_delete)
		itog = scan_qr(f"{message.from_user.id}.png")
		await message.answer(itog, reply_markup = kb_default)
		os.remove(f"{message.from_user.id}.png")
		await state.finish()



time_now = datetime.today()
print(f"[{str(time_now)[:19]}]: –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

executor.start_polling(db, skip_updates = True)
